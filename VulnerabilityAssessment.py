# Vulnerability Assessment of the network using port
import gvm
import ipaddress
from gvm.protocols.gmp import Gmp

# Function for input network detail
def network_detail():
    # Prompt user to enter detail
    print("Please Enter the details of the network.....")
    network_address = input("Enter the IP address: ")
    host = input("Enter the host: ")
    port = int(input("Enter the port number to scan: "))
    username = input("Enter the username of the network: ")
    password = input("Enter the password of the network: ")

    return network_address, host, port, username, password

# Function to scan network on a specific port
def authentication_and_task(ip_network, port,host_name, username, password):
    # Establish Connection
    connection = gvm.connections.TLSConnection(hostname=host_name)
    with Gmp(connection=connection) as gmp:
        # Authenticate credentials
        gmp.authenticate(username, password)

        # Generate list of IP addresses within the IP range
        ip_list = list(ip_network.hosts())

        for ip_address in ip_list:
            str_ip = str(ip_address)

            # Create a target for the scan with the specific port
            target = gmp.create_target(f"Target {str_ip}:{port}", hosts=str_ip, ports=f"{port}")

            # Create a task for the scan
            task = gmp.create_task(f"Scan {str_ip}:{port}", target_id=target.id)

            # Start the scan
            gmp.start_task(task.id)

            # Wait for the scan to complete
            scan_network(gmp, task, str_ip, port)


# Function for scanning network
def scan_network(gmp, task, str_ip, port):
    while True:
        task = gmp.get_task(task.id)
        if task.status in ['New', 'Running']:
            print("Scan in progress...")
        elif task.status == 'Done':
            print("Scan completed.")
            break
        else:
            raise Exception(f"Scan failed with status: {task.status}")
        
    # Retrieve the scan results
    retrieve_result(gmp, task, str_ip, port)


# Function for retrieving scan results
def retrieve_result(gmp, task, str_ip, port):
    results = gmp.get_report_formats()
    for result in results:
        if result.name == 'HTML':
            report = gmp.get_report(task.id, result.id)
            with open(f"scan_results_{str_ip}_{port}.html", "wb") as file:
                file.write(report)

# Main
if __name__ == "__main__":
    # Prompt user to enter network detail
    network_address, host, port, username, password = network_detail()

    # Convert network address to an IP network object
    ip_network = ipaddress.ip_network(network_address)

    # Scan network
    authentication_and_task(ip_network, port,host, username, password)
